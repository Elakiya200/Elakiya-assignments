# Create a simple full-stack project and zip it for download.

import os, json, zipfile, textwrap, pathlib



project_root = "/mnt/data/todo-tasks"

backend_dir = os.path.join(project_root, "backend")

frontend_dir = os.path.join(project_root, "frontend")

os.makedirs(backend_dir, exist_ok=True)

os.makedirs(frontend_dir, exist_ok=True)



# -------------------- BACKEND FILES --------------------

backend_package_json = {

    "name": "todo-tasks-backend",

    "version": "1.0.0",

    "main": "server.js",

    "type": "module",

    "scripts": {

        "start": "node server.js",

        "dev": "nodemon server.js"

    },

    "dependencies": {

        "cors": "^2.8.5",

        "dotenv": "^16.4.5",

        "express": "^4.19.2",

        "mongoose": "^8.5.1"

    },

    "devDependencies": {

        "nodemon": "^3.1.4"

    }

}



server_js = textwrap.dedent("""\

import express from "express";

import mongoose from "mongoose";

import cors from "cors";

import dotenv from "dotenv";

import taskRoutes from "./routes/taskRoutes.js";



dotenv.config();

const app = express();

app.use(cors());

app.use(express.json());



const MONGO_URI = process.env.MONGO_URI || "mongodb://127.0.0.1:27017/todo_tasks";



mongoose.connect(MONGO_URI)

  .then(() => console.log("âœ… MongoDB connected"))

  .catch((err) => console.error("MongoDB error:", err));



app.use("/api/tasks", taskRoutes);



const PORT = process.env.PORT || 5000;

app.listen(PORT, () => console.log(`ðŸš€ Server running on port ${PORT}`));

""")



models_dir = os.path.join(backend_dir, "models")

routes_dir = os.path.join(backend_dir, "routes")

os.makedirs(models_dir, exist_ok=True)

os.makedirs(routes_dir, exist_ok=True)



task_model = textwrap.dedent("""\

import mongoose from "mongoose";



const taskSchema = new mongoose.Schema(

  {

    text: { type: String, required: true, trim: true },

    done: { type: Boolean, default: false }

  },

  { timestamps: true }

);



export default mongoose.model("Task", taskSchema);

""")



task_routes = textwrap.dedent("""\

import { Router } from "express";

import Task from "../models/Task.js";



const router = Router();



// Get all tasks

router.get("/", async (_req, res) => {

  const tasks = await Task.find().sort({ createdAt: -1 });

  res.json(tasks);

});



// Create a new task

router.post("/", async (req, res) => {

  const { text } = req.body;

  if (!text || !text.trim()) return res.status(400).json({ error: "Text is required" });

  const created = await Task.create({ text: text.trim() });

  res.status(201).json(created);

});



// Toggle done

router.patch("/:id/toggle", async (req, res) => {

  const { id } = req.params;

  const task = await Task.findById(id);


